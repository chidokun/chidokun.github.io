<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Science on Nguyễn Tuấn&#39;s Blog</title>
    <link>https://chidokun.github.io/categories/computer-science/</link>
    <description>Recent content in Computer Science on Nguyễn Tuấn&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    <lastBuildDate>Sat, 04 Jan 2020 22:27:00 +0700</lastBuildDate>
    
	<atom:link href="https://chidokun.github.io/categories/computer-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Những điều thú vị của số nhị phân trong máy tính</title>
      <link>https://chidokun.github.io/2020/01/useful-things-of-binary-numbers/</link>
      <pubDate>Sat, 04 Jan 2020 22:27:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2020/01/useful-things-of-binary-numbers/</guid>
      <description>&lt;p&gt;Xin giới thiệu đến các bạn một số điều hữu ích về số nhị phân mà mình đã từng đọc trong cuốn &lt;em&gt;Write Great Code - Volume 1. Understanding the Machine&lt;/em&gt; của tác giả &lt;em&gt;Randall Hyde&lt;/em&gt;. Đây cũng là một quyển sách khá hay mà các bạn có thể đọc để trau dồi thêm kiến thức.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Khi nào cần định nghĩa constructor, copy constructor và destructor trong C&#43;&#43;?</title>
      <link>https://chidokun.github.io/2015/04/cpp-constructor-destructor/</link>
      <pubDate>Wed, 15 Apr 2015 13:12:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/04/cpp-constructor-destructor/</guid>
      <description>&lt;p&gt;Hàm dựng (constructor) và hàm hủy (destructor) là 2 yếu tố quan trọng luôn có trong một lớp (class) trong lập trình hướng đối tượng. Nếu người dùng không định nghĩa thì trình biên dịch sẽ tự động thêm vào hàm dựng và hàm hủy mặc định. Tuy nhiên, đôi khi chúng ta cần phải định nghĩa lại hàm dựng và hàm hủy để đảm bảo an toàn và hợp logic hơn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Đo trực tiếp thời gian chạy của thuật toán trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/03/cpp-measure-execution-time/</link>
      <pubDate>Sat, 21 Mar 2015 01:38:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-measure-execution-time/</guid>
      <description>&lt;p&gt;Đo thời gian chạy là một trong những cách để đánh giá hiệu quả của một thuật toán. Công việc nghe có vẻ khó khăn nhưng thực tế, với các hàm, kiểu dữ liệu được định nghĩa trong thư viện &lt;code&gt;time.h&lt;/code&gt; của C (trong C++ có thể dùng cả &lt;code&gt;time.h&lt;/code&gt; hoặc &lt;code&gt;ctime&lt;/code&gt;), ta có thể đo thời gian chạy của một đoạn chương trình bất kỳ một cách dễ dàng.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Biến tham chiếu khác biến con trỏ như thế nào trong C/C&#43;&#43;?</title>
      <link>https://chidokun.github.io/2015/03/cpp-reference-variable/</link>
      <pubDate>Fri, 20 Mar 2015 23:22:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-reference-variable/</guid>
      <description>&lt;p&gt;Cả tham chiếu (reference) và con trỏ (pointer) đều thuộc kiểu địa chỉ trong C++ và thường được dùng để truy cập gián tiếp đến các đối tượng khác. Tuy nhiên chúng cũng có sự khác nhau cơ bản các bạn có thể tham khảo dưới đây.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tổng quan về kiểu string trong C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/03/cpp-string/</link>
      <pubDate>Fri, 06 Mar 2015 11:48:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-string/</guid>
      <description>&lt;p&gt;Khi tao tác với chuỗi trong ngôn ngữ C chúng ta thao tác với &lt;code&gt;char*&lt;/code&gt; và các hàm thao tác với chuỗi. C++ đã bổ sung kiểu dữ liệu &lt;code&gt;string&lt;/code&gt; tiện lợi hơn rất nhiều. Bài viết này sẽ tóm tắt những điều cơ bản cần biết về kiểu &lt;code&gt;string&lt;/code&gt; của C++.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Những kiến thức căn bản về con trỏ trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/03/cpp-pointer/</link>
      <pubDate>Thu, 05 Mar 2015 22:28:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-pointer/</guid>
      <description>&lt;p&gt;Con trỏ là một khái niệm hơi khó đối với các bạn mới làm quen với lập trình C/C++. Bài viết này sẽ tóm tắt những điều cơ bản cần biết về con trỏ.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Làm quen với MessageBox trong C#</title>
      <link>https://chidokun.github.io/2015/03/csharp-message-box/</link>
      <pubDate>Tue, 03 Mar 2015 20:27:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/csharp-message-box/</guid>
      <description>&lt;p&gt;Chắc hẳn MessageBox đã quá quen thuộc với chúng ta khi sử dụng hệ điều hành Windows. Ngôn ngữ C# và nền tảng .NET Framework đã hỗ trợ rất nhiều trong việc sử dụng &lt;em&gt;MessageBox&lt;/em&gt;. Bài viết này sẽ hướng dẫn các bạn làm quen với &lt;em&gt;MessageBox&lt;/em&gt; trong Windows Form.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hàm xóa một hàng và một cột bất kỳ trong ma trận</title>
      <link>https://chidokun.github.io/2015/03/delete-row-and-col/</link>
      <pubDate>Tue, 03 Mar 2015 17:27:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/delete-row-and-col/</guid>
      <description>&lt;p&gt;Có thể viết hàm xóa một hàng riêng và xóa một cột riêng và gọi chúng để xóa một hàng và một cột trong ma trận. Tuy nhiên, như vậy sẽ duyệt ma trận đến 2 lần. Để tối ưu hóa, ta có thể thực hiện xóa cùng lúc 1 hàng và một cột bằng cách sau đây.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cấp phát động cho mảng hai chiều trong C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-matrix-allocation/</link>
      <pubDate>Tue, 27 Jan 2015 15:18:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-matrix-allocation/</guid>
      <description>&lt;p&gt;Mảng 2 chiều khá quen thuộc với chúng ta. Mình sẽ giới thiệu một vài cách cấp phát động mảng 2 chiều để các bạn lựa chọn cho phù hợp. Ở đây mình minh họa bằng C++, đối với các ngôn ngữ khác thì ý tưởng cũng tương tự vậy thôi. Lưu ý là C++ sẽ không tự động thu hồi tài nguyên động đã cấp phát cho dù có thoát khỏi chương trình, vì thế bắt buộc phải có thao tác giải phóng mảng 2 chiều.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cấp phát động trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-dynamic-allocation/</link>
      <pubDate>Tue, 20 Jan 2015 01:10:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-dynamic-allocation/</guid>
      <description>&lt;p&gt;Bộ nhớ động có lợi hơn bộ nhớ tĩnh rất nhiều, có thể cấp phát thêm hoặc thu hồi lại bộ nhớ. Do đó, bộ nhớ động rất linh hoạt và tiết kiệm hơn so với sử dụng bộ nhớ tĩnh. Một mảng động chứa các phần tử được cấp phát bộ nhớ động, do đó có thể thêm phần tử, xoá phần tử,&amp;hellip; nên quản lý bộ nhớ hiệu quả hơn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cách khởi tạo số ngẫu nhiên trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-random-number/</link>
      <pubDate>Sat, 17 Jan 2015 15:07:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-random-number/</guid>
      <description>&lt;p&gt;Khởi tạo số ngẫu nhiên thường được dùng để giảm bớt công đoạn nhập số cho mảng một chiều, ma trận,&amp;hellip; Để khởi tạo số ngẫu nhiên ta cần biết đến hàm &lt;code&gt;srand()&lt;/code&gt; và &lt;code&gt;rand()&lt;/code&gt; trong &lt;code&gt;stdlib.h&lt;/code&gt;. Trong C++ 2 hàm này có sẵn trong &lt;code&gt;iostream&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Các vấn đề cơ bản về số nguyên tố trong lập trình</title>
      <link>https://chidokun.github.io/2015/01/prime-number/</link>
      <pubDate>Mon, 12 Jan 2015 23:13:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/prime-number/</guid>
      <description>&lt;p&gt;Số nguyên tố là số chỉ có 2 ước, đó là 1 và chính nó, tức là nó chỉ chia hết cho số 1 và chính nó. Số 1 và 0 không được coi là số nguyên tố. Các bài toán cơ bản về số nguyên tố gồm kiểm tra một số nguyên n có phải là số nguyên tố và tìm các số nguyên tố nhỏ hơn hoặc bằng một số nguyên cho trước.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c/c&#43;&#43; on Nguyễn Tuấn&#39;s Blog</title>
    <link>https://chidokun.github.io/tags/c/c&#43;&#43;/</link>
    <description>Recent content in c/c&#43;&#43; on Nguyễn Tuấn&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    
	<atom:link href="https://chidokun.github.io/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Biến tham chiếu khác biến con trỏ như thế nào trong C/C&#43;&#43;?</title>
      <link>https://chidokun.github.io/2015/03/cpp-reference-variable/</link>
      <pubDate>Fri, 20 Mar 2015 23:22:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-reference-variable/</guid>
      <description>&lt;p&gt;Cả tham chiếu (reference) và con trỏ (pointer) đều thuộc kiểu địa chỉ trong C++ và thường được dùng để truy cập gián tiếp đến các đối tượng khác. Tuy nhiên chúng cũng có sự khác nhau cơ bản các bạn có thể tham khảo dưới đây.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hướng dẫn làm menu đơn giản trong màn hình Console</title>
      <link>https://chidokun.github.io/2015/03/simple-console-menu/</link>
      <pubDate>Thu, 19 Mar 2015 11:53:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/simple-console-menu/</guid>
      <description>&lt;p&gt;Đúng như tiêu đề, menu này rất đơn giản cho phép người dùng lựa chọn tính năng của chương trình trong màn hình Console và có thể áp dụng vào những game cơ bản. Bạn chỉ cần có kiến thức về vòng lặp &lt;code&gt;do...while&lt;/code&gt;, cấu trúc điều kiện &lt;code&gt;switch..case&lt;/code&gt; để làm menu này. Cách làm sẽ được minh họa bằng C++.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thuật toán sắp xếp: Selection Sort (chọn trực tiếp)</title>
      <link>https://chidokun.github.io/2015/03/selection-sort/</link>
      <pubDate>Mon, 16 Mar 2015 23:36:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/selection-sort/</guid>
      <description>&lt;p&gt;Selection Sort là một thuật toán sắp xếp tương đối dễ hiểu. Ý tưởng chính vẫn là đổi chỗ những cặp nghịch thế, tuy nhiên cái hay là ở chỗ Selection Sort tìm vị trí chứa phần tử nhỏ nhất để đổi chỗ với phần tử đang xét chứ không đổi tất cả các cặp nghịch thế như &lt;a href=&#34;https://chidokun.github.io/2015/03/bubble-sort/&#34;&gt;Bubble Sort&lt;/a&gt; hay &lt;a href=&#34;https://chidokun.github.io/2015/03/interchange-sort/&#34;&gt;Interchange Sort&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thuật toán sắp xếp: Bubble Sort (sắp xếp nổi bọt)</title>
      <link>https://chidokun.github.io/2015/03/bubble-sort/</link>
      <pubDate>Mon, 16 Mar 2015 22:47:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/bubble-sort/</guid>
      <description>&lt;p&gt;Bubble Sort là một thuật toán sắp xếp kiểu so sánh rất đơn giản và dễ hiểu. Ý tưởng chính của thuật toán này là bắt cặp tất cả các phần tử trong dãy cần sắp xếp và đổi chỗ hai phần tử trong cặp nếu chúng nghịch thế (không thỏa điều kiện thứ tự).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thuật toán sắp xếp: Interchange Sort (đổi chỗ trực tiếp)</title>
      <link>https://chidokun.github.io/2015/03/interchange-sort/</link>
      <pubDate>Sun, 08 Mar 2015 23:44:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/interchange-sort/</guid>
      <description>&lt;p&gt;Để sắp xếp một dãy, có nhiều cách làm khác nhau. Trong bài viết này mình sẽ nói về Interchange Sort, hay còn gọi là thuật toán sắp xếp đổi chỗ trực tiếp.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tổng quan về kiểu string trong C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/03/cpp-string/</link>
      <pubDate>Fri, 06 Mar 2015 11:48:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-string/</guid>
      <description>&lt;p&gt;Khi tao tác với chuỗi trong ngôn ngữ C chúng ta thao tác với &lt;code&gt;char*&lt;/code&gt; và các hàm thao tác với chuỗi. C++ đã bổ sung kiểu dữ liệu &lt;code&gt;string&lt;/code&gt; tiện lợi hơn rất nhiều. Bài viết này sẽ tóm tắt những điều cơ bản cần biết về kiểu &lt;code&gt;string&lt;/code&gt; của C++.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Những kiến thức căn bản về con trỏ trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/03/cpp-pointer/</link>
      <pubDate>Thu, 05 Mar 2015 22:28:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-pointer/</guid>
      <description>&lt;p&gt;Con trỏ là một khái niệm hơi khó đối với các bạn mới làm quen với lập trình C/C++. Bài viết này sẽ tóm tắt những điều cơ bản cần biết về con trỏ.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cấp phát động cho mảng hai chiều trong C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-matrix-allocation/</link>
      <pubDate>Tue, 27 Jan 2015 15:18:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-matrix-allocation/</guid>
      <description>&lt;p&gt;Mảng 2 chiều khá quen thuộc với chúng ta. Mình sẽ giới thiệu một vài cách cấp phát động mảng 2 chiều để các bạn lựa chọn cho phù hợp. Ở đây mình minh họa bằng C++, đối với các ngôn ngữ khác thì ý tưởng cũng tương tự vậy thôi. Lưu ý là C++ sẽ không tự động thu hồi tài nguyên động đã cấp phát cho dù có thoát khỏi chương trình, vì thế bắt buộc phải có thao tác giải phóng mảng 2 chiều.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cấp phát động trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-dynamic-allocation/</link>
      <pubDate>Tue, 20 Jan 2015 01:10:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-dynamic-allocation/</guid>
      <description>&lt;p&gt;Bộ nhớ động có lợi hơn bộ nhớ tĩnh rất nhiều, có thể cấp phát thêm hoặc thu hồi lại bộ nhớ. Do đó, bộ nhớ động rất linh hoạt và tiết kiệm hơn so với sử dụng bộ nhớ tĩnh. Một mảng động chứa các phần tử được cấp phát bộ nhớ động, do đó có thể thêm phần tử, xoá phần tử,&amp;hellip; nên quản lý bộ nhớ hiệu quả hơn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cách khởi tạo số ngẫu nhiên trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-random-number/</link>
      <pubDate>Sat, 17 Jan 2015 15:07:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-random-number/</guid>
      <description>&lt;p&gt;Khởi tạo số ngẫu nhiên thường được dùng để giảm bớt công đoạn nhập số cho mảng một chiều, ma trận,&amp;hellip; Để khởi tạo số ngẫu nhiên ta cần biết đến hàm &lt;code&gt;srand()&lt;/code&gt; và &lt;code&gt;rand()&lt;/code&gt; trong &lt;code&gt;stdlib.h&lt;/code&gt;. Trong C++ 2 hàm này có sẵn trong &lt;code&gt;iostream&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Các vấn đề cơ bản về số nguyên tố trong lập trình</title>
      <link>https://chidokun.github.io/2015/01/prime-number/</link>
      <pubDate>Mon, 12 Jan 2015 23:13:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/prime-number/</guid>
      <description>&lt;p&gt;Số nguyên tố là số chỉ có 2 ước, đó là 1 và chính nó, tức là nó chỉ chia hết cho số 1 và chính nó. Số 1 và 0 không được coi là số nguyên tố. Các bài toán cơ bản về số nguyên tố gồm kiểm tra một số nguyên n có phải là số nguyên tố và tìm các số nguyên tố nhỏ hơn hoặc bằng một số nguyên cho trước.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
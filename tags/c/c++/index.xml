<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c/c&#43;&#43; on Nguyễn Tuấn&#39;s Blog</title>
    <link>https://chidokun.github.io/tags/c/c&#43;&#43;/</link>
    <description>Recent content in c/c&#43;&#43; on Nguyễn Tuấn&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    
	<atom:link href="https://chidokun.github.io/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thuật toán sắp xếp: Interchange Sort (đổi chỗ trực tiếp)</title>
      <link>https://chidokun.github.io/2015/03/interchange-sort/</link>
      <pubDate>Sun, 08 Mar 2015 23:44:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/interchange-sort/</guid>
      <description>&lt;p&gt;Để sắp xếp một dãy, có nhiều cách làm khác nhau. Trong bài viết này mình sẽ nói về Interchange Sort, hay còn gọi là thuật toán sắp xếp đổi chỗ trực tiếp.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tổng quan về kiểu string trong C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/03/cpp-string/</link>
      <pubDate>Fri, 06 Mar 2015 11:48:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-string/</guid>
      <description>&lt;p&gt;Khi tao tác với chuỗi trong ngôn ngữ C chúng ta thao tác với &lt;code&gt;char*&lt;/code&gt; và các hàm thao tác với chuỗi. C++ đã bổ sung kiểu dữ liệu &lt;code&gt;string&lt;/code&gt; tiện lợi hơn rất nhiều. Bài viết này sẽ tóm tắt những điều cơ bản cần biết về kiểu &lt;code&gt;string&lt;/code&gt; của C++.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Những kiến thức căn bản về con trỏ trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/03/cpp-pointer/</link>
      <pubDate>Thu, 05 Mar 2015 22:28:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/cpp-pointer/</guid>
      <description>&lt;p&gt;Con trỏ là một khái niệm hơi khó đối với các bạn mới làm quen với lập trình C/C++. Bài viết này sẽ tóm tắt những điều cơ bản cần biết về con trỏ.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Làm quen với MessageBox trong C#</title>
      <link>https://chidokun.github.io/2015/03/csharp-message-box/</link>
      <pubDate>Tue, 03 Mar 2015 20:27:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/03/csharp-message-box/</guid>
      <description>&lt;p&gt;Chắc hẳn MessageBox đã quá quen thuộc với chúng ta khi sử dụng hệ điều hành Windows. Ngôn ngữ C# và nền tảng .NET Framework đã hỗ trợ rất nhiều trong việc sử dụng &lt;em&gt;MessageBox&lt;/em&gt;. Bài viết này sẽ hướng dẫn các bạn làm quen với &lt;em&gt;MessageBox&lt;/em&gt; trong Windows Form.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cấp phát động cho mảng hai chiều trong C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-matrix-allocation/</link>
      <pubDate>Tue, 27 Jan 2015 15:18:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-matrix-allocation/</guid>
      <description>&lt;p&gt;Mảng 2 chiều khá quen thuộc với chúng ta. Mình sẽ giới thiệu một vài cách cấp phát động mảng 2 chiều để các bạn lựa chọn cho phù hợp. Ở đây mình minh họa bằng C++, đối với các ngôn ngữ khác thì ý tưởng cũng tương tự vậy thôi. Lưu ý là C++ sẽ không tự động thu hồi tài nguyên động đã cấp phát cho dù có thoát khỏi chương trình, vì thế bắt buộc phải có thao tác giải phóng mảng 2 chiều.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cấp phát động trong C/C&#43;&#43;</title>
      <link>https://chidokun.github.io/2015/01/cpp-dynamic-allocation/</link>
      <pubDate>Tue, 20 Jan 2015 01:10:00 +0700</pubDate>
      
      <guid>https://chidokun.github.io/2015/01/cpp-dynamic-allocation/</guid>
      <description>&lt;p&gt;Bộ nhớ động có lợi hơn bộ nhớ tĩnh rất nhiều, có thể cấp phát thêm hoặc thu hồi lại bộ nhớ. Do đó, bộ nhớ động rất linh hoạt và tiết kiệm hơn so với sử dụng bộ nhớ tĩnh. Một mảng động chứa các phần tử được cấp phát bộ nhớ động, do đó có thể thêm phần tử, xoá phần tử,&amp;hellip; nên quản lý bộ nhớ hiệu quả hơn.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>